// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoTesterClient is the client API for DemoTester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoTesterClient interface {
	GetInfo(ctx context.Context, in *DemoTesterGetInfoRequest, opts ...grpc.CallOption) (*DemoTesterGetInfoReply, error)
	GetName(ctx context.Context, in *DemoTesterGetNameRequest, opts ...grpc.CallOption) (*DemoTesterGetNameReply, error)
}

type demoTesterClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoTesterClient(cc grpc.ClientConnInterface) DemoTesterClient {
	return &demoTesterClient{cc}
}

func (c *demoTesterClient) GetInfo(ctx context.Context, in *DemoTesterGetInfoRequest, opts ...grpc.CallOption) (*DemoTesterGetInfoReply, error) {
	out := new(DemoTesterGetInfoReply)
	err := c.cc.Invoke(ctx, "/grpcdemo.DemoTester/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoTesterClient) GetName(ctx context.Context, in *DemoTesterGetNameRequest, opts ...grpc.CallOption) (*DemoTesterGetNameReply, error) {
	out := new(DemoTesterGetNameReply)
	err := c.cc.Invoke(ctx, "/grpcdemo.DemoTester/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoTesterServer is the server API for DemoTester service.
// All implementations must embed UnimplementedDemoTesterServer
// for forward compatibility
type DemoTesterServer interface {
	GetInfo(context.Context, *DemoTesterGetInfoRequest) (*DemoTesterGetInfoReply, error)
	GetName(context.Context, *DemoTesterGetNameRequest) (*DemoTesterGetNameReply, error)
	mustEmbedUnimplementedDemoTesterServer()
}

// UnimplementedDemoTesterServer must be embedded to have forward compatible implementations.
type UnimplementedDemoTesterServer struct {
}

func (UnimplementedDemoTesterServer) GetInfo(context.Context, *DemoTesterGetInfoRequest) (*DemoTesterGetInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedDemoTesterServer) GetName(context.Context, *DemoTesterGetNameRequest) (*DemoTesterGetNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedDemoTesterServer) mustEmbedUnimplementedDemoTesterServer() {}

// UnsafeDemoTesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoTesterServer will
// result in compilation errors.
type UnsafeDemoTesterServer interface {
	mustEmbedUnimplementedDemoTesterServer()
}

func RegisterDemoTesterServer(s grpc.ServiceRegistrar, srv DemoTesterServer) {
	s.RegisterService(&DemoTester_ServiceDesc, srv)
}

func _DemoTester_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoTesterGetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoTesterServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdemo.DemoTester/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoTesterServer).GetInfo(ctx, req.(*DemoTesterGetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoTester_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoTesterGetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoTesterServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdemo.DemoTester/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoTesterServer).GetName(ctx, req.(*DemoTesterGetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DemoTester_ServiceDesc is the grpc.ServiceDesc for DemoTester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoTester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdemo.DemoTester",
	HandlerType: (*DemoTesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _DemoTester_GetInfo_Handler,
		},
		{
			MethodName: "GetName",
			Handler:    _DemoTester_GetName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demotester.proto",
}
